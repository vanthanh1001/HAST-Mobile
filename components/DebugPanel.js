import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Modal,
} from 'react-native';

export default function DebugPanel({ visible, onClose, debugData }) {
  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={onClose}
    >
      <View style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.title}>üêõ Debug Panel</Text>
          <TouchableOpacity onPress={onClose} style={styles.closeButton}>
            <Text style={styles.closeText}>‚úï</Text>
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.content}>
          {debugData && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>üì° API Response</Text>
              <View style={styles.codeBlock}>
                <Text style={styles.codeText}>
                  {JSON.stringify(debugData, null, 2)}
                </Text>
              </View>
            </View>
          )}

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üìã H∆∞·ªõng d·∫´n Debug</Text>
            <Text style={styles.helpText}>
              1. Ki·ªÉm tra status code trong response{'\n'}
              2. T√¨m token trong response data{'\n'}
              3. Ki·ªÉm tra message/error fields{'\n'}
              4. Verify API endpoint ƒëang ho·∫°t ƒë·ªông{'\n'}
              5. Check network logs trong console
            </Text>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üîç C√°c tr∆∞·ªùng h·ª£p c√≥ th·ªÉ x·∫£y ra</Text>
            <Text style={styles.helpText}>
              ‚Ä¢ API tr·∫£ v·ªÅ 200 OK nh∆∞ng kh√¥ng c√≥ token{'\n'}
              ‚Ä¢ Server ch·∫•p nh·∫≠n m·ªçi request (dev mode){'\n'}
              ‚Ä¢ Response format kh√¥ng ƒë√∫ng nh∆∞ expected{'\n'}
              ‚Ä¢ CORS ho·∫∑c network issues{'\n'}
              ‚Ä¢ Backend ch∆∞a implement validation ƒë√∫ng
            </Text>
          </View>
        </ScrollView>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    backgroundColor: '#F9FAFB',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#EF4444',
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 12,
  },
  codeBlock: {
    backgroundColor: '#F3F4F6',
    borderRadius: 8,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: '#6366F1',
  },
  codeText: {
    fontFamily: 'monospace',
    fontSize: 12,
    color: '#374151',
    lineHeight: 18,
  },
  helpText: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 22,
  },
}); 